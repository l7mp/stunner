#!/bin/bash

USAGE="stunnercli get-config <namespace/name>"

[ -z "$1" -o -z "$2" ] && echo $USAGE && exit 0
COMMAND="$1"
ARG="$2"

jq=$(which jq)
if [ -z "$jq" ] ; then
    echo "Error: cannot find jq in PATH" && exit 0
fi
jq="$jq -r"

# dumps only the first listener
get_config () {
    args=(${ARG//\// })
    namespace=${args[0]}
    name=${args[1]}
    [ -z $namespace -o -z $name ] && echo "cannot parse <namespace/name> argument" && exit 0

    tmpfile=$(mktemp "./stunnerd-config.XXXXXX")
    kubectl get cm -n $namespace $name -o jsonpath="{.data.stunnerd\.conf}" > $tmpfile
   
    AUTH_TYPE=$($jq ".auth.type" $tmpfile)
    USERNAME=$($jq ".auth.credentials.username" $tmpfile)
    PASSWORD=$($jq ".auth.credentials.password" $tmpfile)
    SECRET=$($jq ".auth.credentials.secret" $tmpfile)

    [ -n "$AUTH_TYPE" -a "$AUTH_TYPE" != "null" ] && echo -e "STUN/TURN authentication type:\t$AUTH_TYPE"
    [ -n "$USERNAME" -a "$USERNAME" != "null" ]   && echo -e "STUN/TURN username:\t\t$USERNAME"
    [ -n "$PASSWORD" -a "$PASSWORD" != "null" ]   && echo -e "STUN/TURN password:\t\t$PASSWORD"
    [ -n "$SECRET" -a "$SECRET" != "null" ]       && echo -e "STUN/TURN secret:\t\t$SECRET"
    
    local n=0
    for NAME in $($jq '.listeners[] | .name' $tmpfile); do
        PROTOCOL=$($jq ".listeners[${n}].protocol" $tmpfile)
        PUBLIC_ADDR=$($jq ".listeners[${n}].public_address" $tmpfile)
        PUBLIC_PORT=$($jq ".listeners[${n}].public_port" $tmpfile)

        [ -n "$NAME" -a "$NAME" != "null" ]               && echo -e "Listener:\t$NAME"
        [ -n "$PROTOCOL" -a "$PROTOCOL" != "null" ]       && echo -e "Protocol:\t$PROTOCOL"
        [ -n "$PUBLIC_ADDR" -a "$PUBLIC_ADDR" != "null" ] && echo -e "Public address:\t$PUBLIC_ADDR"
        [ -n "$PUBLIC_PORT" -a "$PUBLIC_PORT" != "null" ] && echo -e "Public port:\t$PUBLIC_PORT"

        n=$((n+1))
    done
        
    rm -f $tmpfile

}

case $COMMAND in
    "get-config")
        get_config
        ;;

    *)
        echo "Unknown command: '$COMMAND'"
        exit 0
        ;;
esac

exit 1
